rankall <- function(outcome, num = "best") {
          ## Read outcome data
			
			data <- read.csv("outcome-of-care-measures.csv" , colClasses = "character")
			newdata <- data[ , c(2, 7, 11, 17, 23)]
			names(newdata) <- c("Hospital Name", "state", "heart attack", "heart failure", "pneumonia")
			outcomes <- c("heart attack", "heart failure", "pneumonia") 

          ## Check that state and outcome are valid
		
		#if(is.element(toupper(state), newdata$state) == FALSE) { stop("invalid state") }
		if(is.element(tolower(outcome), outcomes) == FALSE) { stop("invalid outcome") }
		if(num != "best" && num != "worst" && num%%1 != 0) { stop("invalid num") }
		
          
          ## For each state, find the hospital of the given rank
		## parsing the dataset by not including NA values
		newdata <- newdata[newdata[outcome] != "Not Available", ]
		## typecasting the values of the outome to numeric 
		newdata[ , outcome] <- as.numeric(newdata[ , outcome ])
		## sort the dataset as names
		newdata <- newdata[order (newdata[ , "Hospital Name"]), ]
		## create a function for sapply to be executed on each state
		num_row <- function(x) 
			{
				x <- x[order (x[ ,outcome]), ]
				max <- nrow(x)
				if(num == "best") num <- 1 
				if (num == "worst")  num <- as.numeric(max) 
				if (num > max) return (c(NA, x[1,2], NA, NA, NA)) 

				x[num, ]  
			    }
			
		list <- sapply( split(newdata, newdata$state), num_row )
          
          
          ## Return a data frame with the hospital names and the state name
		
		output <- data.frame(matrix(list, nrow = length(list)/5, ncol = 5, byrow = TRUE)[ , c(1,2)])
		names(output) <- c("Hospital" , "State")
		output
            
       }
